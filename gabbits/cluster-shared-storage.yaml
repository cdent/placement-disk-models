# This file creates two compute nodes associated with two different
# clusters, each of which uses the same single datastore. In
# placement this is modeled as a shared resource provider. "Sharing"
# is managing by putting things in the same placement aggregate.
#
# Looks like this:
#
#       cluster1 ---sharing--- store 1 ---sharing--- cluster2      
# 

# NOTE: Sharing doesn't work on the nova side yet for a variety of
# reasons. See line 220 (/CI testing for shared store) on
# https://etherpad.openstack.org/p/nova-ptg-stein and
# https://bugs.launchpad.net/nova/+bug/1784020

# NOTE: In the code below we use insider knowledge of how resource
# provider generations work, so we don't have to look back at the
# resource provider to see how it works. This is not how things
# should be done in a real situation as concurrent threads can
# change the providers and their associates and thus change the
# generation. What's being done here is to remove noise.

# Set default headers used on every request.
defaults:
    # Uncomment this if you want to see the headers and and bodies
    # of requests and responses.
    # verbose: True
    request_headers:
        accept: application/json
        content-type: application/json
        x-auth-token: admin
        openstack-api-version: placement latest

tests:

- name: create compute1
  POST: /resource_providers
  data:
      name: cluster1
      uuid: 5871d95c-38ae-490b-a1e7-7319619c878e

- name: create compute2
  POST: /resource_providers
  data:
      name: cluster2
      uuid: 77e6e524-6ba6-4c35-8b42-ab81936c911a

- name: create store1
  POST: /resource_providers
  data:
      name: store1
      uuid: 8db8571b-632d-4220-af3d-f7899ef72c6b

- name: put compute1 in aggregate
  PUT: /resource_providers/5871d95c-38ae-490b-a1e7-7319619c878e/aggregates
  data:
      aggregates:
          - 2585f099-8d02-4984-b9a6-d0bfbbec30fb
      resource_provider_generation: 0

- name: put compute2 in aggregate
  PUT: /resource_providers/77e6e524-6ba6-4c35-8b42-ab81936c911a/aggregates
  data:
      aggregates:
          - 2585f099-8d02-4984-b9a6-d0bfbbec30fb
      resource_provider_generation: 0

- name: put store1 in aggregate
  PUT: /resource_providers/8db8571b-632d-4220-af3d-f7899ef72c6b/aggregates
  data:
      aggregates:
          - 2585f099-8d02-4984-b9a6-d0bfbbec30fb
      resource_provider_generation: 0

# Set inventories in the computes and the data store
- name: set compute1 inventory
  PUT: /resource_providers/5871d95c-38ae-490b-a1e7-7319619c878e/inventories
  data:
      inventories:
          MEMORY_MB:
              total: 491520
              reserved: 8192
          VCPU:
              total: 480
              reserved: 6
      resource_provider_generation: 1

- name: set compute2 inventory
  PUT: /resource_providers/77e6e524-6ba6-4c35-8b42-ab81936c911a/inventories
  data:
      inventories:
          MEMORY_MB:
              total: 74000
              reserved: 8192
          VCPU:
              total: 1480
              reserved: 6
      resource_provider_generation: 1

- name: set store1 inventory
  PUT: /resource_providers/8db8571b-632d-4220-af3d-f7899ef72c6b/inventories
  data:
      inventories:
          DISK_GB:
              total: 970000
      resource_provider_generation: 1

# Set sharing trait on store1. Without this the resource provider is
# not considered a sharing provider (being in an aggregate is not
# enough, otherwise computes would be sharing, which would not
# work).
- name: set store1 traits
  PUT: /resource_providers/8db8571b-632d-4220-af3d-f7899ef72c6b/traits
  data:
      traits:
          - MISC_SHARES_VIA_AGGREGATE
      resource_provider_generation: 2

# Get some allocation candidates. The output we expect is 2
# allocation requests and 3 resource providers.
- name: request candidates
  # Turning on verbose here can be very illuminating.
  # verbose: True
  GET: /allocation_candidates?resources=VCPU:8,DISK_GB:1024,MEMORY_MB:8192
  response_json_paths:
      # There's two allocation requests and three provider summaries,
      # the each compute paired with the store and all three of the
      # providers.
      $.allocation_requests.`len`: 2
      $.provider_summaries.`len`: 3
      # some info on the datastore
      $.provider_summaries['8db8571b-632d-4220-af3d-f7899ef72c6b'].resources:
          DISK_GB:
              used: 0
              capacity: 970000

# Clean up. Ordering doesn't matter on shared providers.
- name: delete compute1
  DELETE: /resource_providers/5871d95c-38ae-490b-a1e7-7319619c878e
  status: 204

- name: delete compute2
  DELETE: /resource_providers/77e6e524-6ba6-4c35-8b42-ab81936c911a
  status: 204

- name: delete store1
  DELETE: /resource_providers/8db8571b-632d-4220-af3d-f7899ef72c6b
  status: 204
